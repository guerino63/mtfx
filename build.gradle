
plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.7'
}

mainClassName = 'it.ma.mototrainerp.Launcher'

group 'it.ma'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

//Con questo copio direttamente dal sorgente allo .zip/.tar senza passare per la /build
distributions {
    main {
//        baseName = 'conf$$'
        contents {
            into ('conf$$'){
                from 'conf$$'
            }
            from 'mtfx.bat' //start dos command
        }
    }
}



javafx {
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}
configurations {
    customConfig.extendsFrom implementation
}
dependencies {
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.12'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Check CRC MD5, SHA(1)..(512)',
                'Implementation-Version': version,
                'Main-Class': "$mainClassName"
    }
    baseName = project.name + '-all'
    from { configurations.customConfig.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task tree(type:Exec) {

    logging.captureStandardOutput LogLevel.LIFECYCLE
    logging.captureStandardError  LogLevel.ERROR

    // directory esecuzione comando
    //workingDir '.'
    String[] lst = workingDir.list()
    //on windows:
    commandLine 'cmd', '/c', 'tree.bat'


    doLast {
        println(lst.toString())
    }

    //store the output instead of printing to the console:
//    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}
